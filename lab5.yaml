openapi: 3.0.3
info:
  title: Swagger Agency - OpenAPI 3.0
  version: 1.0.11
servers:
  - url: http://0.0.0.0:8080
tags:
  - name: tour
    description: Everything about your Tours
  - name: agency
    description: Access to Tour agency orders
  - name: user
    description: Operations about user
paths:
  /tour:
    put:
      tags:
        - tour
      summary: Update an existing tour
      description: Update an existing tour by Id
      operationId: updateTour
      requestBody:
        description: Update an existent tour in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tour'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tour'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tour'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tour'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Tour'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - tour
      summary: Add a new tour to the agency
      description: Add a new tour to the agency
      operationId: addTour
      requestBody:
        description: Create a new tour in the agency
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tour'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tour'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tour'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tour'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Tour'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:tours
            - read:tours
  /tour/findByStatus:
    get:
      tags:
        - tour
      summary: Finds Tours by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findToursByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tour'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tour'
        '400':
          description: Invalid status value
  /tour/findByAgency:
    get:
      tags:
        - tour
      summary: Finds Tours by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findToursByAgency
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tour'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tour'
        '400':
          description: Invalid status value
      
  /tour/{tourId}:
    get:
      tags:
        - tour
      summary: Find tour by ID
      description: Returns a single tour
      operationId: getTourById
      parameters:
        - name: tourId
          in: path
          description: ID of tour to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tour'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Tour'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tour not found
        '403':
          description: access denied
      security:
        - api_key: []
        - petstore_auth:
            - write:tours
            - read:tours
    
    delete:
      tags:
        - tour
      summary: Deletes a tour
      description: delete a tour
      operationId: deleteTour
      parameters:
       
        - name: tourId
          in: path
          description: Tour id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid tour value
      security:
        - petstore_auth:
            - write:tours
            - read:tours
  /agency/inventory:
    get:
      tags:
        - agency
      summary: Returns tour inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Tour'
              application/xml:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Tour'
        '404':
          description: Agency not found
      
  /agency/order:
    post:
      tags:
        - agency
      summary: Place an order for a tour
      description: Place a new order in the agency
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
      security:
        - api_key: []
  /agency/order/{orderId}:
    get:
      tags:
        - agency
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - api_key: []
    delete:
      tags:
        - agency
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - api_key: []
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Empty fields
        '401':
          description: Username or email already taken
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
          
        '403':
          description: Access denied
        '405':
          description: Invalid input
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
         
        '403':
          description: Access denied
      security:
        - api_key: []
     
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        quantity:
          type: integer
          format: int32
          example: 7
        order_date:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - recived
        tour_id:
            $ref: '#/components/schemas/Tour'
        user_id:
            $ref: '#/components/schemas/User'
      xml:
        name: order

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        is_admin:
         type: boolean
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
      xml:
        name: user
    Tour:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: New Zealand tour
        price:
          type: integer
          example: 400
        photo_url:
          type: string
          example: 'https://www.google.com/'
        avaliable:
          type: boolean
      xml:
        name: tour
   
  requestBodies:
    Tour:
      description: Tour object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tour'
        application/xml:
          schema:
            $ref: '#/components/schemas/Tour'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://agency.swagger.io/oauth/authorize
          scopes:
            write:tours: modify tours in your account
            read:tours: read your tours
    api_key:
      type: apiKey
      name: api_key
      in: header